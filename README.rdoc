README
======

This project is ready cloning and use, but is not yet a proper skeleton and
does not yet have full test coverage. It's a work in progress with pieces being
pulled in from other projects and updated to Rails 4.

The goal of this skeleton project is to provide rock solid security and performance
without significant configuration or rewriting code.

After cloning...

1. Generate new security tokens
2. Search and replace `StarterKit` with your app name
3. Edit RegistrationController and migrations to customize user fields as needed

```bash
# OSX
gem install rb-fsevent
gem install zeus
gem install guard
```

```bash
zeus start
bundle exec guard
```

Demo
====

Twitter demo app credentials uses a callback url of http://0.0.0.0:3000/auth/twitter/callback


TODO
====

* add support for username
* Setup Rack::Cache https://devcenter.heroku.com/articles/rack-cache-memcached-rails31
* Install Devise Security Extension https://github.com/phatworx/devise_security_extension
* Review config/initializers/devise.rb
* Convert to lazy registration https://github.com/mwlang/lazy_registration_demos
* Use decorators https://github.com/drapergem/draper
* Make sure rspecs follow best practices: http://betterspecs.org/
* Run should_clean -d spec/


Compatibility
=============

* IE 8+ unless additional shims are added
  * See app/assets/stylesheets/icons_social.scss


Configure
=========

Replace values in config/env.rb with development values or delete the file if not needed.

Debugging
=========

Use `byebug` instead of `debugger`.


Sidekiq
=======

For demo on Heroku, StarterKit spawns a sidekiq worker in the web dyno.

To use traditional workers in their own dyno, modify Procfile and config/unicorn.rb


Auth Flows
==========

* origin = page user was on when auth flow started
* after auth = page where user can be prompted to enter any
  additional required account info like email address

### Sign Up

Start at /a/signup

**OAuth:**

1. RegistrationsController#after_auth
2. If user.valid?, redirect to origin or user_root_path
3. If user.invalid?, show interrupt page so user can add additional info
  1. Post to RegistrationsController#create

If user already had an account via the OAuth provider, he/she is simply logged in.

**Username/Password:**

1. Post to RegistrationsController#create
2. Redirect to origin or user_root_path


### Login

**OAuth:**

If user does not already have an account via the OAuth provider, redirect to signup page.

Otherwise, login user and redirect to either...

1. RegistrationsController#after_auth if additional account info is needed
2. Origin page if specified
3. user_root_path

**Username/Password:**

Same as OAuth flow above.



Philosophy
==========

BDD is fun. Best practices increase productivity. Setting up frameworks is a waste of time.
